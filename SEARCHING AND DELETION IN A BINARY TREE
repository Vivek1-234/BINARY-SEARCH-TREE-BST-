#include<iostream>
using namespace std;


struct node {
   int data ; 
   node* left ;
   node* right ;

   node(int val){
       data = val ; 
       left = NULL;
       right = NULL;

   }
};


//  SEARCH a node inn a binary tree ----------->>>>>>>>>>>>>


node* insertbst(node* root , int val){

    if(root==NULL){
        return new node(val);
    }
    if(val<root->data){

        root->left = insertbst(root->left , val);
    }
    else {
        root->right = insertbst(root->right , val);

    }
    return root;    

}
 
 node* search(node* root ,  int key ){

     if(root==NULL){

         return NULL;

     }
    
    if(root->data ==key){
        return root;
    }
     if(root->data<key){  

          return search(root->right , key);
     }
     else{

         return search(root->left , key );
     }



 }



  //   DELETION of a node in a tree -------->>>>>>>>>>>>>>>>>>>

  int inordersucc(node* root , int key ){

      node* curr = root;
      while(curr && curr->left!=NULL){
       curr= curr->left;
      }
      return curr;
  }
 

  node* deletion(node* root , int key){
      if(root==NULL){
          return ;
      }
     
     if(key<root->data){
         root->left = deletion(root->left , key );
     }
     else if(key>root->data){
         root->right = deletion(root->right , key );
     }
     else{
         if(root->left==NULL){
             node* temp = root->right;
             free(root);
             return temp ;
         }
         else if(root->right==NULL){
             node* temp = root->left;
             free(root);
             return temp ;
         }
          node* temp = inordersucc(root->right , key);
          root->data = temp->data;
          root->right = deletion(root->right ,temp->data);
                 
     }
     return root;        
        
  }

  void preorder(node* root){
      if(root==NULL){
          return ;

      }
        cout<<root->data;
        preorder(root->left);
        preorder(root->right);
       

  }

   int main(){
    node* root = NULL;
    root=insertbst(root ,5);
    root=insertbst(root ,1);
    root=insertbst(root ,3);
    root=insertbst(root ,4);
    root=insertbst(root ,2);
    root=insertbst(root ,7);

    preorder(root);
    cout<<endl;

//    if(search(root , 111) ==NULL){

//        cout<<"key doesn't exist";
//    }
//    else{
//        cout<<"key exist";
//    }
  preorder(root);

return 0;
   }
